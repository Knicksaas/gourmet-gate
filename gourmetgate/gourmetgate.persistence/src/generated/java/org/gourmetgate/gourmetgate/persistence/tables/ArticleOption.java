/*
 * This file is generated by jOOQ.
 */
package org.gourmetgate.gourmetgate.persistence.tables;


import org.gourmetgate.gourmetgate.persistence.Keys;
import org.gourmetgate.gourmetgate.persistence.Schema;
import org.gourmetgate.gourmetgate.persistence.tables.records.ArticleOptionRecord;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ArticleOption extends TableImpl<ArticleOptionRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>Schema.ARTICLE_OPTION</code>
   */
  public static final ArticleOption ARTICLE_OPTION = new ArticleOption();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ArticleOptionRecord> getRecordType() {
    return ArticleOptionRecord.class;
  }

  /**
   * The column <code>Schema.ARTICLE_OPTION.ARTICLE_OPTION_ID</code>.
   */
  public final TableField<ArticleOptionRecord, String> ARTICLE_OPTION_ID = createField(DSL.name("ARTICLE_OPTION_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.ARTICLE_OPTION.ARTICLE_ID</code>.
   */
  public final TableField<ArticleOptionRecord, String> ARTICLE_ID = createField(DSL.name("ARTICLE_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.ARTICLE_OPTION.DESCRIPTION</code>.
   */
  public final TableField<ArticleOptionRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(80).nullable(false), this, "");

  private ArticleOption(Name alias, Table<ArticleOptionRecord> aliased) {
    this(alias, aliased, null);
  }

  private ArticleOption(Name alias, Table<ArticleOptionRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>Schema.ARTICLE_OPTION</code> table reference
   */
  public ArticleOption(String alias) {
    this(DSL.name(alias), ARTICLE_OPTION);
  }

  /**
   * Create an aliased <code>Schema.ARTICLE_OPTION</code> table reference
   */
  public ArticleOption(Name alias) {
    this(alias, ARTICLE_OPTION);
  }

  /**
   * Create a <code>Schema.ARTICLE_OPTION</code> table reference
   */
  public ArticleOption() {
    this(DSL.name("ARTICLE_OPTION"), null);
  }

  public <O extends Record> ArticleOption(Table<O> child, ForeignKey<O, ArticleOptionRecord> key) {
    super(child, key, ARTICLE_OPTION);
  }

  @Override
  public org.jooq.Schema getSchema() {
    return aliased() ? null : Schema.SCHEMA;
  }

  @Override
  public UniqueKey<ArticleOptionRecord> getPrimaryKey() {
    return Keys.ARTICLE_OPTION_PK;
  }

  @Override
  public List<ForeignKey<ArticleOptionRecord, ?>> getReferences() {
    return Arrays.asList(Keys.ARTICLE_OPTION_ARTICLE_ARTICLE_ID_FK);
  }

  private transient Article _article;

  /**
   * Get the implicit join path to the <code>Schema.ARTICLE</code> table.
   */
  public Article article() {
    if (_article == null)
      _article = new Article(this, Keys.ARTICLE_OPTION_ARTICLE_ARTICLE_ID_FK);

    return _article;
  }

  @Override
  public ArticleOption as(String alias) {
    return new ArticleOption(DSL.name(alias), this);
  }

  @Override
  public ArticleOption as(Name alias) {
    return new ArticleOption(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public ArticleOption rename(String name) {
    return new ArticleOption(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ArticleOption rename(Name name) {
    return new ArticleOption(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, String, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
