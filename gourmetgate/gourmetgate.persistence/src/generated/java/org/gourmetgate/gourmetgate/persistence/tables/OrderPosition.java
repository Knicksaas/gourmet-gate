/*
 * This file is generated by jOOQ.
 */
package org.gourmetgate.gourmetgate.persistence.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.gourmetgate.gourmetgate.persistence.Keys;
import org.gourmetgate.gourmetgate.persistence.Schema;
import org.gourmetgate.gourmetgate.persistence.tables.records.OrderPositionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class OrderPosition extends TableImpl<OrderPositionRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>Schema.ORDER_POSITION</code>
   */
  public static final OrderPosition ORDER_POSITION = new OrderPosition();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<OrderPositionRecord> getRecordType() {
    return OrderPositionRecord.class;
  }

  /**
   * The column <code>Schema.ORDER_POSITION.ORDER_POSITION_ID</code>.
   */
  public final TableField<OrderPositionRecord, String> ORDER_POSITION_ID = createField(DSL.name("ORDER_POSITION_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.ORDER_POSITION.ORDER_ID</code>.
   */
  public final TableField<OrderPositionRecord, String> ORDER_ID = createField(DSL.name("ORDER_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.ORDER_POSITION.ARTICLE_ID</code>.
   */
  public final TableField<OrderPositionRecord, String> ARTICLE_ID = createField(DSL.name("ARTICLE_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.ORDER_POSITION.VAT</code>.
   */
  public final TableField<OrderPositionRecord, Double> VAT = createField(DSL.name("VAT"), SQLDataType.DOUBLE.nullable(false), this, "");

  /**
   * The column <code>Schema.ORDER_POSITION.PRICE</code>.
   */
  public final TableField<OrderPositionRecord, BigDecimal> PRICE = createField(DSL.name("PRICE"), SQLDataType.DECIMAL(15, 10).nullable(false).defaultValue(DSL.field("0.0", SQLDataType.DECIMAL)), this, "");

  private OrderPosition(Name alias, Table<OrderPositionRecord> aliased) {
    this(alias, aliased, null);
  }

  private OrderPosition(Name alias, Table<OrderPositionRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>Schema.ORDER_POSITION</code> table reference
   */
  public OrderPosition(String alias) {
    this(DSL.name(alias), ORDER_POSITION);
  }

  /**
   * Create an aliased <code>Schema.ORDER_POSITION</code> table reference
   */
  public OrderPosition(Name alias) {
    this(alias, ORDER_POSITION);
  }

  /**
   * Create a <code>Schema.ORDER_POSITION</code> table reference
   */
  public OrderPosition() {
    this(DSL.name("ORDER_POSITION"), null);
  }

  public <O extends Record> OrderPosition(Table<O> child, ForeignKey<O, OrderPositionRecord> key) {
    super(child, key, ORDER_POSITION);
  }

  @Override
  public org.jooq.Schema getSchema() {
    return aliased() ? null : Schema.SCHEMA;
  }

  @Override
  public UniqueKey<OrderPositionRecord> getPrimaryKey() {
    return Keys.ORDER_POSITION_PK;
  }

  @Override
  public List<ForeignKey<OrderPositionRecord, ?>> getReferences() {
    return Arrays.asList(Keys.ORDER_POSITION_ORDER_ORDER_ID_FK, Keys.ORDER_POSITION_ARTICLE_ARTICLE_ID_FK);
  }

  private transient Order _order;
  private transient Article _article;

  /**
   * Get the implicit join path to the <code>Schema.order</code> table.
   */
  public Order order() {
    if (_order == null)
      _order = new Order(this, Keys.ORDER_POSITION_ORDER_ORDER_ID_FK);

    return _order;
  }

  /**
   * Get the implicit join path to the <code>Schema.ARTICLE</code> table.
   */
  public Article article() {
    if (_article == null)
      _article = new Article(this, Keys.ORDER_POSITION_ARTICLE_ARTICLE_ID_FK);

    return _article;
  }

  @Override
  public OrderPosition as(String alias) {
    return new OrderPosition(DSL.name(alias), this);
  }

  @Override
  public OrderPosition as(Name alias) {
    return new OrderPosition(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public OrderPosition rename(String name) {
    return new OrderPosition(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public OrderPosition rename(Name name) {
    return new OrderPosition(name, null);
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row5<String, String, String, Double, BigDecimal> fieldsRow() {
    return (Row5) super.fieldsRow();
  }
}
