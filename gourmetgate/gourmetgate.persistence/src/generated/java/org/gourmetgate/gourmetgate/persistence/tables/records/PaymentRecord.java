/*
 * This file is generated by jOOQ.
 */
package org.gourmetgate.gourmetgate.persistence.tables.records;


import org.gourmetgate.gourmetgate.persistence.tables.Payment;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PaymentRecord extends UpdatableRecordImpl<PaymentRecord> implements Record4<String, String, String, String> {

  private static final long serialVersionUID = 1L;

  /**
   * Setter for <code>Schema.PAYMENT.PAYMENT_ID</code>.
   */
  public void setPaymentId(String value) {
    set(0, value);
  }

  /**
   * Getter for <code>Schema.PAYMENT.PAYMENT_ID</code>.
   */
  public String getPaymentId() {
    return (String) get(0);
  }

  /**
   * Setter for <code>Schema.PAYMENT.ORDER_ID</code>.
   */
  public void setOrderId(String value) {
    set(1, value);
  }

  /**
   * Getter for <code>Schema.PAYMENT.ORDER_ID</code>.
   */
  public String getOrderId() {
    return (String) get(1);
  }

  /**
   * Setter for <code>Schema.PAYMENT.STATUS</code>.
   */
  public void setStatus(String value) {
    set(2, value);
  }

  /**
   * Getter for <code>Schema.PAYMENT.STATUS</code>.
   */
  public String getStatus() {
    return (String) get(2);
  }

  /**
   * Setter for <code>Schema.PAYMENT.PAYMENT_EXT_ID</code>.
   */
  public void setPaymentExtId(String value) {
    set(3, value);
  }

  /**
   * Getter for <code>Schema.PAYMENT.PAYMENT_EXT_ID</code>.
   */
  public String getPaymentExtId() {
    return (String) get(3);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<String> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row4<String, String, String, String> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  @Override
  public Row4<String, String, String, String> valuesRow() {
    return (Row4) super.valuesRow();
  }

  @Override
  public Field<String> field1() {
    return Payment.PAYMENT.PAYMENT_ID;
  }

  @Override
  public Field<String> field2() {
    return Payment.PAYMENT.ORDER_ID;
  }

  @Override
  public Field<String> field3() {
    return Payment.PAYMENT.STATUS;
  }

  @Override
  public Field<String> field4() {
    return Payment.PAYMENT.PAYMENT_EXT_ID;
  }

  @Override
  public String component1() {
    return getPaymentId();
  }

  @Override
  public String component2() {
    return getOrderId();
  }

  @Override
  public String component3() {
    return getStatus();
  }

  @Override
  public String component4() {
    return getPaymentExtId();
  }

  @Override
  public String value1() {
    return getPaymentId();
  }

  @Override
  public String value2() {
    return getOrderId();
  }

  @Override
  public String value3() {
    return getStatus();
  }

  @Override
  public String value4() {
    return getPaymentExtId();
  }

  @Override
  public PaymentRecord value1(String value) {
    setPaymentId(value);
    return this;
  }

  @Override
  public PaymentRecord value2(String value) {
    setOrderId(value);
    return this;
  }

  @Override
  public PaymentRecord value3(String value) {
    setStatus(value);
    return this;
  }

  @Override
  public PaymentRecord value4(String value) {
    setPaymentExtId(value);
    return this;
  }

  @Override
  public PaymentRecord values(String value1, String value2, String value3, String value4) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
   * Create a detached PaymentRecord
   */
  public PaymentRecord() {
    super(Payment.PAYMENT);
  }

  /**
   * Create a detached, initialised PaymentRecord
   */
  public PaymentRecord(String paymentId, String orderId, String status, String paymentExtId) {
    super(Payment.PAYMENT);

    setPaymentId(paymentId);
    setOrderId(orderId);
    setStatus(status);
    setPaymentExtId(paymentExtId);
  }
}
