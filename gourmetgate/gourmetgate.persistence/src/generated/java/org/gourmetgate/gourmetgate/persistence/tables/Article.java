/*
 * This file is generated by jOOQ.
 */
package org.gourmetgate.gourmetgate.persistence.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.gourmetgate.gourmetgate.persistence.Keys;
import org.gourmetgate.gourmetgate.persistence.Schema;
import org.gourmetgate.gourmetgate.persistence.tables.records.ArticleRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Article extends TableImpl<ArticleRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>Schema.ARTICLE</code>
   */
  public static final Article ARTICLE = new Article();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ArticleRecord> getRecordType() {
    return ArticleRecord.class;
  }

  /**
   * The column <code>Schema.ARTICLE.ARTICLE_ID</code>.
   */
  public final TableField<ArticleRecord, String> ARTICLE_ID = createField(DSL.name("ARTICLE_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.ARTICLE.NAME</code>.
   */
  public final TableField<ArticleRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(80).nullable(false), this, "");

  /**
   * The column <code>Schema.ARTICLE.UNIT</code>.
   */
  public final TableField<ArticleRecord, String> UNIT = createField(DSL.name("UNIT"), SQLDataType.LONGVARCHAR.nullable(false).defaultValue(DSL.field("'5 dl'", SQLDataType.LONGVARCHAR)), this, "");

  /**
   * The column <code>Schema.ARTICLE.HAS_OPTIONS</code>.
   */
  public final TableField<ArticleRecord, Boolean> HAS_OPTIONS = createField(DSL.name("HAS_OPTIONS"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

  /**
   * The column <code>Schema.ARTICLE.VAT_ID</code>.
   */
  public final TableField<ArticleRecord, String> VAT_ID = createField(DSL.name("VAT_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.ARTICLE.PRICE</code>.
   */
  public final TableField<ArticleRecord, BigDecimal> PRICE = createField(DSL.name("PRICE"), SQLDataType.DECIMAL(15, 10).nullable(false).defaultValue(DSL.field("0.0", SQLDataType.DECIMAL)), this, "");

  /**
   * The column <code>Schema.ARTICLE.ARTICLE_GROUP_ID</code>.
   */
  public final TableField<ArticleRecord, String> ARTICLE_GROUP_ID = createField(DSL.name("ARTICLE_GROUP_ID"), SQLDataType.VARCHAR(36).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

  /**
   * The column <code>Schema.ARTICLE.ENABLED</code>.
   */
  public final TableField<ArticleRecord, Boolean> ENABLED = createField(DSL.name("ENABLED"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

  private Article(Name alias, Table<ArticleRecord> aliased) {
    this(alias, aliased, null);
  }

  private Article(Name alias, Table<ArticleRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>Schema.ARTICLE</code> table reference
   */
  public Article(String alias) {
    this(DSL.name(alias), ARTICLE);
  }

  /**
   * Create an aliased <code>Schema.ARTICLE</code> table reference
   */
  public Article(Name alias) {
    this(alias, ARTICLE);
  }

  /**
   * Create a <code>Schema.ARTICLE</code> table reference
   */
  public Article() {
    this(DSL.name("ARTICLE"), null);
  }

  public <O extends Record> Article(Table<O> child, ForeignKey<O, ArticleRecord> key) {
    super(child, key, ARTICLE);
  }

  @Override
  public org.jooq.Schema getSchema() {
    return aliased() ? null : Schema.SCHEMA;
  }

  @Override
  public UniqueKey<ArticleRecord> getPrimaryKey() {
    return Keys.ARTICLE_PK;
  }

  @Override
  public List<ForeignKey<ArticleRecord, ?>> getReferences() {
    return Arrays.asList(Keys.ARTICLE_VAT_VAT_ID_FK, Keys.ARTICLE_ARTICLE_GROUP_ARTICLE_GROUP_ID_FK);
  }

  private transient Vat _vat;
  private transient ArticleGroup _articleGroup;

  /**
   * Get the implicit join path to the <code>Schema.VAT</code> table.
   */
  public Vat vat() {
    if (_vat == null)
      _vat = new Vat(this, Keys.ARTICLE_VAT_VAT_ID_FK);

    return _vat;
  }

  /**
   * Get the implicit join path to the <code>Schema.ARTICLE_GROUP</code>
   * table.
   */
  public ArticleGroup articleGroup() {
    if (_articleGroup == null)
      _articleGroup = new ArticleGroup(this, Keys.ARTICLE_ARTICLE_GROUP_ARTICLE_GROUP_ID_FK);

    return _articleGroup;
  }

  @Override
  public Article as(String alias) {
    return new Article(DSL.name(alias), this);
  }

  @Override
  public Article as(Name alias) {
    return new Article(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Article rename(String name) {
    return new Article(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Article rename(Name name) {
    return new Article(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<String, String, String, Boolean, String, BigDecimal, String, Boolean> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
