/*
 * This file is generated by jOOQ.
 */
package org.gourmetgate.gourmetgate.persistence.tables;


import org.gourmetgate.gourmetgate.persistence.Keys;
import org.gourmetgate.gourmetgate.persistence.Schema;
import org.gourmetgate.gourmetgate.persistence.tables.records.ArticleGroupRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ArticleGroup extends TableImpl<ArticleGroupRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>Schema.ARTICLE_GROUP</code>
   */
  public static final ArticleGroup ARTICLE_GROUP = new ArticleGroup();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ArticleGroupRecord> getRecordType() {
    return ArticleGroupRecord.class;
  }

  /**
   * The column <code>Schema.ARTICLE_GROUP.ARTICLE_GROUP_ID</code>.
   */
  public final TableField<ArticleGroupRecord, String> ARTICLE_GROUP_ID = createField(DSL.name("ARTICLE_GROUP_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.ARTICLE_GROUP.NAME</code>.
   */
  public final TableField<ArticleGroupRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(80).nullable(false), this, "");

  /**
   * The column <code>Schema.ARTICLE_GROUP.STATUS</code>.
   */
  public final TableField<ArticleGroupRecord, Boolean> STATUS = createField(DSL.name("STATUS"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

  private ArticleGroup(Name alias, Table<ArticleGroupRecord> aliased) {
    this(alias, aliased, null);
  }

  private ArticleGroup(Name alias, Table<ArticleGroupRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>Schema.ARTICLE_GROUP</code> table reference
   */
  public ArticleGroup(String alias) {
    this(DSL.name(alias), ARTICLE_GROUP);
  }

  /**
   * Create an aliased <code>Schema.ARTICLE_GROUP</code> table reference
   */
  public ArticleGroup(Name alias) {
    this(alias, ARTICLE_GROUP);
  }

  /**
   * Create a <code>Schema.ARTICLE_GROUP</code> table reference
   */
  public ArticleGroup() {
    this(DSL.name("ARTICLE_GROUP"), null);
  }

  public <O extends Record> ArticleGroup(Table<O> child, ForeignKey<O, ArticleGroupRecord> key) {
    super(child, key, ARTICLE_GROUP);
  }

  @Override
  public org.jooq.Schema getSchema() {
    return aliased() ? null : Schema.SCHEMA;
  }

  @Override
  public UniqueKey<ArticleGroupRecord> getPrimaryKey() {
    return Keys.ARTICLE_GROUP_PK;
  }

  @Override
  public ArticleGroup as(String alias) {
    return new ArticleGroup(DSL.name(alias), this);
  }

  @Override
  public ArticleGroup as(Name alias) {
    return new ArticleGroup(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public ArticleGroup rename(String name) {
    return new ArticleGroup(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ArticleGroup rename(Name name) {
    return new ArticleGroup(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<String, String, Boolean> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
