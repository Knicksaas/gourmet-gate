/*
 * This file is generated by jOOQ.
 */
package org.gourmetgate.gourmetgate.persistence.tables;


import java.util.Date;

import org.gourmetgate.gourmetgate.persistence.Keys;
import org.gourmetgate.gourmetgate.persistence.Schema;
import org.gourmetgate.gourmetgate.persistence.common.DateConverter;
import org.gourmetgate.gourmetgate.persistence.tables.records.EventLogRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EventLog extends TableImpl<EventLogRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>Schema.EVENT_LOG</code>
   */
  public static final EventLog EVENT_LOG = new EventLog();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<EventLogRecord> getRecordType() {
    return EventLogRecord.class;
  }

  /**
   * The column <code>Schema.EVENT_LOG.EVENT_LOG_ID</code>.
   */
  public final TableField<EventLogRecord, String> EVENT_LOG_ID = createField(DSL.name("EVENT_LOG_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.EVENT_LOG.ENTITY_TYPE</code>.
   */
  public final TableField<EventLogRecord, String> ENTITY_TYPE = createField(DSL.name("ENTITY_TYPE"), SQLDataType.VARCHAR(80).nullable(false), this, "");

  /**
   * The column <code>Schema.EVENT_LOG.ENTITY_ID</code>.
   */
  public final TableField<EventLogRecord, String> ENTITY_ID = createField(DSL.name("ENTITY_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.EVENT_LOG.TYPE</code>.
   */
  public final TableField<EventLogRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(80).nullable(false), this, "");

  /**
   * The column <code>Schema.EVENT_LOG.DISPLAY_TEXT</code>.
   */
  public final TableField<EventLogRecord, String> DISPLAY_TEXT = createField(DSL.name("DISPLAY_TEXT"), SQLDataType.VARCHAR(400).nullable(false), this, "");

  /**
   * The column <code>Schema.EVENT_LOG.TIMESTAMP</code>.
   */
  public final TableField<EventLogRecord, Date> TIMESTAMP = createField(DSL.name("TIMESTAMP"), SQLDataType.LOCALDATETIME(9).nullable(false), this, "", new DateConverter());

  private EventLog(Name alias, Table<EventLogRecord> aliased) {
    this(alias, aliased, null);
  }

  private EventLog(Name alias, Table<EventLogRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>Schema.EVENT_LOG</code> table reference
   */
  public EventLog(String alias) {
    this(DSL.name(alias), EVENT_LOG);
  }

  /**
   * Create an aliased <code>Schema.EVENT_LOG</code> table reference
   */
  public EventLog(Name alias) {
    this(alias, EVENT_LOG);
  }

  /**
   * Create a <code>Schema.EVENT_LOG</code> table reference
   */
  public EventLog() {
    this(DSL.name("EVENT_LOG"), null);
  }

  public <O extends Record> EventLog(Table<O> child, ForeignKey<O, EventLogRecord> key) {
    super(child, key, EVENT_LOG);
  }

  @Override
  public org.jooq.Schema getSchema() {
    return aliased() ? null : Schema.SCHEMA;
  }

  @Override
  public UniqueKey<EventLogRecord> getPrimaryKey() {
    return Keys.EVENT_LOG_PK;
  }

  @Override
  public EventLog as(String alias) {
    return new EventLog(DSL.name(alias), this);
  }

  @Override
  public EventLog as(Name alias) {
    return new EventLog(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public EventLog rename(String name) {
    return new EventLog(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public EventLog rename(Name name) {
    return new EventLog(name, null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<String, String, String, String, String, Date> fieldsRow() {
    return (Row6) super.fieldsRow();
  }
}
