/*
 * This file is generated by jOOQ.
 */
package org.gourmetgate.gourmetgate.persistence.tables;


import org.gourmetgate.gourmetgate.persistence.Keys;
import org.gourmetgate.gourmetgate.persistence.Schema;
import org.gourmetgate.gourmetgate.persistence.tables.records.VatRecord;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Vat extends TableImpl<VatRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>Schema.VAT</code>
   */
  public static final Vat VAT = new Vat();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<VatRecord> getRecordType() {
    return VatRecord.class;
  }

  /**
   * The column <code>Schema.VAT.VAT_ID</code>.
   */
  public final TableField<VatRecord, String> VAT_ID = createField(DSL.name("VAT_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

  /**
   * The column <code>Schema.VAT.PERCENT</code>.
   */
  public final TableField<VatRecord, Double> PERCENT = createField(DSL.name("PERCENT"), SQLDataType.DOUBLE.nullable(false), this, "");

  private Vat(Name alias, Table<VatRecord> aliased) {
    this(alias, aliased, null);
  }

  private Vat(Name alias, Table<VatRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>Schema.VAT</code> table reference
   */
  public Vat(String alias) {
    this(DSL.name(alias), VAT);
  }

  /**
   * Create an aliased <code>Schema.VAT</code> table reference
   */
  public Vat(Name alias) {
    this(alias, VAT);
  }

  /**
   * Create a <code>Schema.VAT</code> table reference
   */
  public Vat() {
    this(DSL.name("VAT"), null);
  }

  public <O extends Record> Vat(Table<O> child, ForeignKey<O, VatRecord> key) {
    super(child, key, VAT);
  }

  @Override
  public org.jooq.Schema getSchema() {
    return aliased() ? null : Schema.SCHEMA;
  }

  @Override
  public UniqueKey<VatRecord> getPrimaryKey() {
    return Keys.VAT_PK;
  }

  @Override
  public Vat as(String alias) {
    return new Vat(DSL.name(alias), this);
  }

  @Override
  public Vat as(Name alias) {
    return new Vat(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Vat rename(String name) {
    return new Vat(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Vat rename(Name name) {
    return new Vat(name, null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<String, Double> fieldsRow() {
    return (Row2) super.fieldsRow();
  }
}
