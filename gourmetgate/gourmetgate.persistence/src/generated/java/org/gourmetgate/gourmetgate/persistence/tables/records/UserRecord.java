/*
 * This file is generated by jOOQ.
 */
package org.gourmetgate.gourmetgate.persistence.tables.records;


import org.gourmetgate.gourmetgate.persistence.tables.User;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record5<String, String, String, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>Schema.user.USER_ID</code>.
     */
    public void setUserId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>Schema.user.USER_ID</code>.
     */
    public String getUserId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>Schema.user.USER_NAME</code>.
     */
    public void setUserName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>Schema.user.USER_NAME</code>.
     */
    public String getUserName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>Schema.user.PASSWORD_HAS</code>.
     */
    public void setPasswordHas(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>Schema.user.PASSWORD_HAS</code>.
     */
    public String getPasswordHas() {
        return (String) get(2);
    }

    /**
     * Setter for <code>Schema.user.SALT</code>.
     */
    public void setSalt(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>Schema.user.SALT</code>.
     */
    public String getSalt() {
        return (String) get(3);
    }

    /**
     * Setter for <code>Schema.user.ADMIN</code>.
     */
    public void setAdmin(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>Schema.user.ADMIN</code>.
     */
    public Boolean getAdmin() {
        return (Boolean) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, String, String, Boolean> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return User.USER.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return User.USER.USER_NAME;
    }

    @Override
    public Field<String> field3() {
        return User.USER.PASSWORD_HAS;
    }

    @Override
    public Field<String> field4() {
        return User.USER.SALT;
    }

    @Override
    public Field<Boolean> field5() {
        return User.USER.ADMIN;
    }

    @Override
    public String component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getUserName();
    }

    @Override
    public String component3() {
        return getPasswordHas();
    }

    @Override
    public String component4() {
        return getSalt();
    }

    @Override
    public Boolean component5() {
        return getAdmin();
    }

    @Override
    public String value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getUserName();
    }

    @Override
    public String value3() {
        return getPasswordHas();
    }

    @Override
    public String value4() {
        return getSalt();
    }

    @Override
    public Boolean value5() {
        return getAdmin();
    }

    @Override
    public UserRecord value1(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserRecord value2(String value) {
        setUserName(value);
        return this;
    }

    @Override
    public UserRecord value3(String value) {
        setPasswordHas(value);
        return this;
    }

    @Override
    public UserRecord value4(String value) {
        setSalt(value);
        return this;
    }

    @Override
    public UserRecord value5(Boolean value) {
        setAdmin(value);
        return this;
    }

    @Override
    public UserRecord values(String value1, String value2, String value3, String value4, Boolean value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(String userId, String userName, String passwordHas, String salt, Boolean admin) {
        super(User.USER);

        setUserId(userId);
        setUserName(userName);
        setPasswordHas(passwordHas);
        setSalt(salt);
        setAdmin(admin);
    }
}
